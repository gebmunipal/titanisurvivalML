{
  "cells": [
    {
      "metadata": {
        "_uuid": "fb2121bfa476074f4977d84a5c37e1115873f7a9"
      },
      "cell_type": "markdown",
      "source": "This notebook shows in a simple way a quick process to train a ML model and submit the predictions it generates.\n"
    },
    {
      "metadata": {
        "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
        "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
        "trusted": true,
        "_kg_hide-output": false
      },
      "cell_type": "code",
      "source": "# Import the usual libraries\nimport pandas as pd\nimport numpy as np\nimport graphviz as gv\nimport matplotlib.pyplot as plt\n%matplotlib inline\nprint(pd.__version__, np.__version__, gv.__version__)",
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": "0.23.0 1.13.3 0.8.3\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "_cell_guid": "79c7e3d0-c299-4dcb-8224-4455121ee9b0",
        "collapsed": true,
        "_uuid": "d629ff2d2480ee46fbb7e2d37f6b5fab8052498a",
        "trusted": false
      },
      "cell_type": "markdown",
      "source": "We will load both train and test data (actually evaluation data), and concat them to work on both at the same time. Just notice that the test data has the _Survived_ feature missing."
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "7a88d8a66d4979e6fdb3e6bb3e990b1fae7a0907",
        "collapsed": true
      },
      "cell_type": "code",
      "source": "train_df = pd.read_csv('../input/train.csv', index_col='PassengerId')\ntest_df = pd.read_csv('../input/test.csv', index_col='PassengerId')\n\ndf = pd.concat([train_df, test_df], sort=True)",
      "execution_count": 2,
      "outputs": []
    },
    {
      "metadata": {
        "_uuid": "9b56a612499c06d9eeb39e65c901ae6a1c83e829"
      },
      "cell_type": "markdown",
      "source": "Let's see 10 random examples (if Survived is NaN, it's a one from the test/evaluation data)"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "e203a9904ddfbae5f45f7694ea685f410dbf15b9"
      },
      "cell_type": "code",
      "source": "df.sample(10)",
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 3,
          "data": {
            "text/plain": "              Age Cabin Embarked     ...      SibSp Survived      Ticket\nPassengerId                          ...                                \n301           NaN   NaN        Q     ...          0      1.0        9234\n1231          NaN   NaN        C     ...          0      NaN        2622\n735          23.0   NaN        S     ...          0      0.0      233639\n1027         24.0   NaN        S     ...          0      NaN      350409\n1096         25.0   NaN        S     ...          0      NaN  C.A. 34050\n776          18.0   NaN        S     ...          0      0.0      347078\n821          52.0   B69        S     ...          1      1.0       12749\n184           1.0    F4        S     ...          2      1.0      230136\n1146         32.5   NaN        S     ...          0      NaN      345775\n944          20.0   NaN        S     ...          2      NaN       29105\n\n[10 rows x 11 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n      <th>Fare</th>\n      <th>Name</th>\n      <th>Parch</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>SibSp</th>\n      <th>Survived</th>\n      <th>Ticket</th>\n    </tr>\n    <tr>\n      <th>PassengerId</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>301</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Q</td>\n      <td>7.7500</td>\n      <td>Kelly, Miss. Anna Katherine \"Annie Kate\"</td>\n      <td>0</td>\n      <td>3</td>\n      <td>female</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>9234</td>\n    </tr>\n    <tr>\n      <th>1231</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>C</td>\n      <td>7.2292</td>\n      <td>Betros, Master. Seman</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>2622</td>\n    </tr>\n    <tr>\n      <th>735</th>\n      <td>23.0</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>13.0000</td>\n      <td>Troupiansky, Mr. Moses Aaron</td>\n      <td>0</td>\n      <td>2</td>\n      <td>male</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>233639</td>\n    </tr>\n    <tr>\n      <th>1027</th>\n      <td>24.0</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>7.8542</td>\n      <td>Carlsson, Mr. Carl Robert</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>350409</td>\n    </tr>\n    <tr>\n      <th>1096</th>\n      <td>25.0</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>10.5000</td>\n      <td>Andrew, Mr. Frank Thomas</td>\n      <td>0</td>\n      <td>2</td>\n      <td>male</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>C.A. 34050</td>\n    </tr>\n    <tr>\n      <th>776</th>\n      <td>18.0</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>7.7500</td>\n      <td>Myhrman, Mr. Pehr Fabian Oliver Malkolm</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>347078</td>\n    </tr>\n    <tr>\n      <th>821</th>\n      <td>52.0</td>\n      <td>B69</td>\n      <td>S</td>\n      <td>93.5000</td>\n      <td>Hays, Mrs. Charles Melville (Clara Jennings Gr...</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>12749</td>\n    </tr>\n    <tr>\n      <th>184</th>\n      <td>1.0</td>\n      <td>F4</td>\n      <td>S</td>\n      <td>39.0000</td>\n      <td>Becker, Master. Richard F</td>\n      <td>1</td>\n      <td>2</td>\n      <td>male</td>\n      <td>2</td>\n      <td>1.0</td>\n      <td>230136</td>\n    </tr>\n    <tr>\n      <th>1146</th>\n      <td>32.5</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>9.5000</td>\n      <td>Wenzel, Mr. Linhart</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>345775</td>\n    </tr>\n    <tr>\n      <th>944</th>\n      <td>20.0</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>23.0000</td>\n      <td>Hocking, Miss. Ellen Nellie\"\"</td>\n      <td>1</td>\n      <td>2</td>\n      <td>female</td>\n      <td>2</td>\n      <td>NaN</td>\n      <td>29105</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "collapsed": true,
        "_uuid": "a016f03ab2219733ea0c090d4d16d7139dfe88d2"
      },
      "cell_type": "markdown",
      "source": "You can refer to [its data dictionary](https://www.kaggle.com/c/titanic/data) to know more about these features.\n\nNotice that original features start with uppercase. We will add later new features in lowercase."
    },
    {
      "metadata": {
        "_uuid": "d2dace735c4ceabe174d8963ff79c03220688bb0"
      },
      "cell_type": "markdown",
      "source": ""
    },
    {
      "metadata": {
        "_uuid": "684e54f10dde598e68f83c93a1c6b9140d6cef7a"
      },
      "cell_type": "markdown",
      "source": "First let's see if the dataset has missing values."
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "a8d61633abddfee08b0a0c6be8c3b347de3a64bf"
      },
      "cell_type": "code",
      "source": "df[['Age', 'Sex']].isnull().sum()",
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 4,
          "data": {
            "text/plain": "Age    263\nSex      0\ndtype: int64"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "524eb3995207b08452606529f26fad7d47c2edb7"
      },
      "cell_type": "markdown",
      "source": "So we do need to fill in the missing Age values of 263 examples, and no need to do this with Sex feature."
    },
    {
      "metadata": {
        "_uuid": "0eac959a8886c31a6257c53aea4a500374e4978d"
      },
      "cell_type": "markdown",
      "source": "Using pandas __.describe()__ method we can see general statistics for each feature."
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "7f0ed71cab712ceea1930295605b00118cbbb64d"
      },
      "cell_type": "code",
      "source": "df['Age'].describe()",
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 5,
          "data": {
            "text/plain": "count    1046.000000\nmean       29.881138\nstd        14.413493\nmin         0.170000\n25%        21.000000\n50%        28.000000\n75%        39.000000\nmax        80.000000\nName: Age, dtype: float64"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "9bb275034cce3d9ffbddff2ba673c6a06c7da422"
      },
      "cell_type": "code",
      "source": "# Quantity of people by given age\nmax_age = df['Age'].max()\ndf['Age'].hist(bins=int(max_age))",
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 6,
          "data": {
            "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x7f296e6f1518>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<matplotlib.figure.Figure at 0x7f296e6f1198>",
            "image/png": "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\nqRD/B9XXBD10FcVUAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "6c35a9e1f895e5285df915bb22f3c3f1cd7ebfc3"
      },
      "cell_type": "code",
      "source": "# Survival ratio per decade, ignoring NaN with dropna()\ndf['decade'] = df['Age'].dropna().apply(lambda x: int(x/10))\ndf[['decade', 'Survived']].groupby('decade').mean().plot()",
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 7,
          "data": {
            "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x7f296acf8f98>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<matplotlib.figure.Figure at 0x7f296e6d9c18>",
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAEKCAYAAADpfBXhAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAIABJREFUeJzt3Xl8lNXd///XJztkA5JAAgTCEkIW\nBSWAqChuiN6KtreKele0peJSra21rbbu1l+t7V3b/qpVFItaFbVWRW9cWpXNBSGokAlbCFsyCUlY\nZrKv5/vHTDCGABOYyTVz5fN8PHiYmbnmuj6J8M6Zc851jhhjUEopZS9hVheglFLK/zTclVLKhjTc\nlVLKhjTclVLKhjTclVLKhjTclVLKhjTclVLKhjTclVLKhjTclVLKhiKsunBycrLJyMiw6vJKKRWS\nCgoKqo0xKUc7zrJwz8jIYO3atVZdXimlQpKI7PTlOO2WUUopG9JwV0opG9JwV0opG7Ksz707LS0t\nlJaW0tjYaHUpIScmJobhw4cTGRlpdSlKqSAQVOFeWlpKfHw8GRkZiIjV5YQMYwx79+6ltLSUUaNG\nWV2OUioIHLVbRkSeFZFKESk8zOsiIn8RkWIRWS8iJx9rMY2NjSQlJWmw95CIkJSUpJ94lFIH+dLn\nvgiYdYTXLwAyvX/mA387noI02I+N/tyUUp0dNdyNMSuAfUc45BLgeePxOTBARNL8VaBSStlFW7vh\n/1u6ka93Hwj4tfwxW2YYsLvT41Lvc4cQkfkislZE1lZVVfnh0oHx8MMPk5uby4knnsjEiRNZvXr1\ncZ9zyZIlPPLII36oDuLi4vxyHqVU79peXcuCFSVsrawN+LX8MaDaXX9At7tuG2MWAAsA8vPzg3Jn\n7s8++4x33nmHdevWER0dTXV1Nc3NzT69t7W1lYiI7n+ks2fPZvbs2f4sVSkVYhxONwC5QxMCfi1/\ntNxLgfROj4cDTj+c1xLl5eUkJycTHR0NQHJyMkOHDiUjI4Pq6moA1q5dy4wZMwC4//77mT9/PjNn\nzmTu3LlMnToVh8Nx8HwzZsygoKCARYsWccstt+ByucjIyKC9vR2A+vp60tPTaWlpYdu2bcyaNYtJ\nkyYxffp0Nm3aBMD27duZNm0akydP5p577unFn4ZSyp8cTjdREWGMHRz4T9/+aLkvAW4RkcXAVMBl\njCk/3pM+8LaDIu9vOX/JGZrAfRfnHvGYmTNn8uCDDzJu3DjOPfdc5syZw5lnnnnE9xQUFLBq1Sr6\n9evHY489xquvvsoDDzxAeXk5TqeTSZMmsWHDBgASExOZMGECy5cv56yzzuLtt9/m/PPPJzIykvnz\n5/Pkk0+SmZnJ6tWrufnmm/noo4+47bbbuOmmm5g7dy6PP/64334eSqne5XC6GJ8aT2R44O8f9WUq\n5MvAZ0CWiJSKyDwRuVFEbvQeshQoAYqBp4GbA1ZtL4iLi6OgoIAFCxaQkpLCnDlzWLRo0RHfM3v2\nbPr16wfAFVdcwWuvvQbAq6++yuWXX37I8XPmzOGVV14BYPHixcyZM4fa2lo+/fRTLr/8ciZOnMgN\nN9xAebnnd+Qnn3zCVVddBcA111zjr29VKdWLjDEUlrl7pUsGfGi5G2OuOsrrBviR3yryOloLO5DC\nw8OZMWMGM2bM4IQTTuC5554jIiLiYFdK1/nksbGxB78eNmwYSUlJrF+/nldeeYWnnnrqkPPPnj2b\nu+66i3379lFQUMDZZ59NXV0dAwYM4Kuvvuq2Jp3qqFRoKzvQgKuhhZyhib1yPV1bpovNmzezdevW\ng4+/+uorRo4cSUZGBgUFBQC8/vrrRzzHlVdeyaOPPorL5eKEE0445PW4uDimTJnCbbfdxkUXXUR4\neDgJCQmMGjXqYKvfGMPXX38NwGmnncbixYsBePHFF/3yfSqlelfHYGpeL7XcNdy7qK2t5dprryUn\nJ4cTTzyRoqIi7r//fu677z5uu+02pk+fTnh4+BHPcdlll7F48WKuuOKKwx4zZ84c/vGPfzBnzpyD\nz7344ossXLiQCRMmkJuby1tvvQXAn//8Zx5//HEmT56My+XyzzeqlOpVjjIXYQLjU3sn3MXTq9L7\n8vPzTdfNOjZu3Eh2drYl9diB/vyUCl7zFq1h1756/n37kSdoHI2IFBhj8o92nLbclVKqFzicbvKG\n9U5/O2i4K6VUwFXXNlHhbuy1mTIQhOFuVTdRqNOfm1LBq2MwNaevhntMTAx79+7VoOqhjvXcY2Ji\nrC5FKdUNh9MzESI3rfe6ZYJqs47hw4dTWlpKMC8qFqw6dmJSSgUfh9NN+qB+JPbvvZ3SgircIyMj\ndSchpZTtFDndvdpqhyDrllFKKbupaWxhe3Vdrw6mgoa7UkoF1MbyGgByh2m4K6WUbXQMpub10poy\nHTTclVIqgArL3CTHRTM4oXdns2m4K6VUADmcrl7vbwcNd6WUCpim1jaKK2vJ6+X+dtBwV0qpgNlS\nUUtruyG3l/vbQcNdKaUCprDjzlTtllFKKftwOF3ER0eQPrB/r19bw10ppQLE4XSTMzSBsLDe3yZT\nw10ppQKgrd2wsdxtSX87aLgrpVRAlFTV0tjSbkl/O2i4K6VUQHSs4d7byw500HBXSqkAcDhdREeE\nMTYlzpLra7grpVQAFJa5GZ8aT0S4NTGr4a6UUn5mjMHhdJFj0WAqaLgrpZTfle5vwN3YasmyAx00\n3JVSys8ODqZqy10ppezD4XQRHiaMT423rAYNd6WU8jOH082YlFhiIsMtq0HDXSml/MzhdPX6zktd\n+RTuIjJLRDaLSLGI3NnN6yNE5GMR+VJE1ovIhf4vVSmlgl9VTRN73E3kWHRnaoejhruIhAOPAxcA\nOcBVIpLT5bC7gVeNMScBVwJP+LtQpZQKBY6Dy/wGf8t9ClBsjCkxxjQDi4FLuhxjgI5fU4mA038l\nKqVU6OiYKWN1yz3Ch2OGAbs7PS4FpnY55n7gAxG5FYgFzvVLdUopFWKKnG5GDOpPYr9IS+vwpeXe\n3ULEpsvjq4BFxpjhwIXACyJyyLlFZL6IrBWRtVVVVT2vVimlglyhRRtid+VLuJcC6Z0eD+fQbpd5\nwKsAxpjPgBggueuJjDELjDH5xpj8lJSUY6tYKaWClLuxhZ1760Mm3NcAmSIySkSi8AyYLulyzC7g\nHAARycYT7to0V0r1KRsPLvNr7WAq+BDuxphW4BbgfWAjnlkxDhF5UERmew/7GXC9iHwNvAxcZ4zp\n2nWjlFK29s2yA9a33H0ZUMUYsxRY2uW5ezt9XQSc5t/SlFIqtBQ6XaTERzM4PsbqUvQOVaWU8pci\npzsoWu2g4a6UUn7R2NLG1spay5cd6KDhrpRSfrBlTw1t7UZb7kopZSeFZdav4d6ZhrtSSvmBw+ki\nPiaC9EH9rC4F0HBXSim/cHgHU0W6u6m/92m4K6XUcWpta2djuTtoumRAw10ppY5bSXUdTa3tQTOY\nChruSil13IJlDffONNyVUuo4OcrcREeEMSYl1upSDtJwV0qp41TodDE+LYGI8OCJ1OCpRCmlQpAx\nJqiWHeig4a6UUsehdH8D7sbWoFl2oIOGu1JKHYdvBlO15a6UUrZRWOYmPEzISo23upRv0XBXSqnj\n4HC6GJsSR0xkuNWlfIuGu1JKHQeH003usODqkgENd6WUOmaVNY1U1jQF1c1LHTTclVLqGAXTnqld\nabgrpdQxKvKGe46Gu1JK2YfD6WJkUn8SYiKtLuUQGu5KKXWMCsuC787UDhruSil1DNyNLezaVx+U\ng6mg4a6UUsekKIgHU0HDXSmljsk3M2W05a6UUrbhKHMxOD6alPhoq0vploa7UkodA0cQLvPbmYa7\nUkr1UGNLG8VVteQNC84uGdBwV0qpHttUUUNbu9GWu1JK2UkwbojdVUiGe1VNk9UlKKX6MIfTTUJM\nBMMH9rO6lMPyKdxFZJaIbBaRYhG58zDHXCEiRSLiEJGX/FvmNxas2Mb5f1rBtqraQF1CKaWOyDOY\nmoiIWF3KYR013EUkHHgcuADIAa4SkZwux2QCdwGnGWNygZ8EoFYAzstJJUxg7sIvqHA1BuoySinV\nrda2djaVB/dMGfCt5T4FKDbGlBhjmoHFwCVdjrkeeNwYsx/AGFPp3zK/MSo5lkXfn4KroYW5z67m\nQH1zoC6llFKH2FZVR1Nre1Bu0NGZL+E+DNjd6XGp97nOxgHjROQTEflcRGZ1dyIRmS8ia0VkbVVV\n1bFVDOQNS2TBNZPYUV3PvOfW0tDcdsznUkqpnugYTM0L4sFU8C3cu+tUMl0eRwCZwAzgKuAZERlw\nyJuMWWCMyTfG5KekpPS01m85dWwyf7pyIut27edHL62jpa39uM6nlFK+cDjdxESGMTolzupSjsiX\ncC8F0js9Hg44uznmLWNMizFmO7AZT9gH1IUnpPHQJXl8tKmSO1/fgDFdf+copZR/FZa5GJ+aQHhY\n8A6mgm/hvgbIFJFRIhIFXAks6XLMm8BZACKSjKebpsSfhR7O904Zye3njeP1daU88u6m3rikUqqP\nMsZQFAKDqeDpTjkiY0yriNwCvA+EA88aYxwi8iCw1hizxPvaTBEpAtqAnxtj9gay8M5uPXss1bVN\nPLWihEGxUdxw5pjeurRSqg/Zva+BmsbWoF52oMNRwx3AGLMUWNrluXs7fW2A271/ep2IcP/Fueyr\na+a3724iKS6ayyYNt6IUpZSNFR68M9UGLfdQERYm/O8VEzhQ38IvX1/PwP6RnJM9xOqylFI24nC6\nCA8Txg2Jt7qUowrJ5QcOJzoinCevmUTu0ARufnEda3fss7okpZSNOJxuMgfHERMZbnUpR2WrcAeI\ni47g79dNZtiAfvxg0Ro2V9RYXZJSyiY6lh0IBbYLd4CkuGienzeFflHhzH12Nbv31VtdklIqxFW6\nG6mqaQqJ/nawabgDDB/Yn+d/MJWG5jauffYL9tbqSpJKqWPnCPINsbuybbgDZKXG8+x1kyk70MD3\nF62htqnV6pKUUiGqY9mBHA334JCfMYgn/udkHE43N75QQFOrrkOjlOo5h9NNRlJ/4mMirS7FJ7YP\nd4Bzsofwu/8+kVXF1fzs1a9pa9dlCpRSPVPodIXMYCr0kXAHuGzScH514XjeWV/OA287dB0apZTP\nXA0t7N7XEDJdMmCjm5h8Mf+MMeytbeapFSUkxUZz27kBX9tMKWUDRd7B1FBYdqBDnwp3gDsvGE91\nbTOP/WcLSXFRfO+UkVaXpJQKco4QWnagQ58LdxHhkf8+gQP1zdzzViGDYqO48IQ0q8tSSgUxh9PN\nkIRokuOirS7FZ32mz72zyPAw/nr1yUwaMZCfLP6KT4urrS5JKRXEHCE2mAp9NNwB+kWFs/DayYxK\njuX659eyodRldUlKqSDU0NxGcWUteSHUJQN9ONwBEvtH8twPpjCgfxTX/f0LtlfXWV2SUirIbKpw\n024gR1vuoSU1MYYX5k3BANcsXM0ed6PVJSmlgkioLTvQoc+HO8DolDgWfX8y++uaufbZL3A1tFhd\nklIqSDicbhL7RTJ8YD+rS+kRDXevE4cP4Klr8tlWVcv1z62lsUWXKVBKQZHTRe7QBESCe0PsrjTc\nOzk9M5nH5kxkzc593PLSl7S2tVtdklLKQi1t7WysqAm5LhnQcD/ERScO5cHZufxn4x5+9cYGXaZA\nqT5sW1Utza3tITcNEvrgTUy+uGZaBlW1zfzlw60kxUXzy1njrS5JKWUBR1nHsgOh13LXcD+Mn56b\nyd7aJv62bBtJsVH8cPpoq0tSSvWyQqeLfpHhjEqOs7qUHtNwPwwR4cFL8thf38xv/m8jSXFRfOek\n4VaXpZTqRQ6nm/Fp8YSHhdZgKmif+xGFhwmPzZnIqWOS+Plr6/l4U6XVJSmlekl7u2Gj0x2Sg6mg\n4X5U0RHhPHXNJManxXPTiwUU7NxvdUlKqV6we389NU2t5IXgYCpouPskPiaSv183hdSEGH6waA1b\n9tRYXVLIa2lrZ2O5m+ZWnW6qglNhWcedqaEZ7trn7qOU+GhemDeV7/7tU+Yu/ILXbz6VYQNC6461\nYFDT2MIra3bz7KrtOF2NxEVHcNrYJGZkDWZGVgppifozVcHB4XQRESaMSw29wVTQcO+R9EH9ef4H\nU7jiqc+Yu3A1r914KoNio6wuKySUuxpY9MkOXlq9i5qmVqaOGsQtZ2dS6HSxfHMV7zv2ADA+NZ4z\ns1KYMW4w+RkDiQzXD5fKGg6nm8wh8URHhFtdyjHRcO+h7LQEFl47mWsWrub7i9bw0g+nEhutP8bD\nKXK6eWZlCUu+dtJuDBeekMb100czIX3AwWOMMWytrGXZ5kqWba7i2VXbeWp5CXHREZw+NpkZWSnM\nyBpMamKMhd+J6kuMMTicLmZkDba6lGOmqXQMpowaxF+vPpkbXljLTS+u45m5+URFaAuzgzGGFVur\neWZlCSu3VtM/Kpy50zL4/mkZpA/qf8jxIsK4IfGMGxLP/DPGUNvUyifF1SzbXMXyzZW856gAPK36\nju6bSSP7Vqu+obmNPe5GRib1D7k1TkJRZU0T1bXNITtTBnwMdxGZBfwZCAeeMcY8cpjjLgNeAyYb\nY9b6rcogdF7OEB757on84vX13PHa1/xpzkTCQnAurD81t7az5Gsnz6wsYVNFDYPjPXf3Xj1lBIn9\nI30+T1x0BOfnpnJ+birGGLbs+aZV/8zKEp5cvo346AhOz/ymVT8kwR6temMMpfsb2FRRw8ZyN5sq\n3Gwqr2H73jqMgYnpA/jF+VmcOjbZ6lJt7Zs9U0NzMBV8CHcRCQceB84DSoE1IrLEGFPU5bh44MfA\n6kAUGoyumJzO3rpmfvfeJgbFRnHfxTl9slXlamjhpdW7WPTpdva4m8gaEs8fLp/A7AlDj/sTjYiQ\nlRpPVmo8N5w5hprGFj4p3svyLZ6wf7fQ06rPTkvwBP24FE4OkVZ9TWMLW/bUsLG85mCIb6qoobap\nFQARGDmoP+NTE5g9cShx0REsXLWdq59ZzWljk7hjZhYnjRho8XdhTx3LDuTYvOU+BSg2xpQAiMhi\n4BKgqMtxDwGPAnf4tcIgd+OZo6mubWLhqu0k9IvkpjPH0C8qNAdgemr3vnr+/skOXlmzi7rmNk4f\nm8yjl03gjMzkgP2Si4+JZFZeKrPyPK36zXtqWLa5imWbK3l6RQl/W7aN+JgIpmcmM2PcYM7MSrG8\nVd/Wbti5t45NFTVsKnezscIT5rv3NRw8Jj4mguzUBP775GGMT0tgfKqnm6rreM73ThnJi6t38fjH\nxXzniU85L2cId8zMIis1vre/LVsrdLoYlRxLXAiPp/lS+TBgd6fHpcDUzgeIyElAujHmHRHpU+Eu\nIvz6wmz21XkWGnty+TbyRw5kemYK0zOTyUlLsF13zfrSAyxYUcK7hRUIMHvCUOZNH9XrH2FFhPGp\nCYxPTeDGg616T1/9x5srWbrB06rP6WjVZw3m5BEDiAhgq/5AffPBEN9UUcPGihq2VNTQ4N0fIEw8\nm8NMGD6AKyePYHxqPOPTEhiaGOPTL8SYyHDmnT6KOZPT+fuq7SxYUcKsP6/g0onD+Mm5mYxMig3Y\n99aXOJzubw36hyI52pK2InI5cL4x5ofex9cAU4wxt3ofhwEfAdcZY3aIyDLgju763EVkPjAfYMSI\nEZN27tzpz+/FUu3thpXF1azcUsWq4mo2VXhudBoUG8WpY5KYnpnM6ZkpITs3vr3d8PHmShasKGH1\n9n3ER0dw9dQRXHdaRlDOTTfGsKnim1b92p37aWs3JMREMD0zxTvdMoXBx9iqb2lrZ3t1nbdf/Jsw\nL3d9s03jwP6RZKclkO1tiWenJTB2cBwxkf77ZHegvpm/Ld/Gc5/uoLXNMGdyOreenakzi46Dq76F\nCQ9+wC9mZXHzjLFWl3MIESkwxuQf9Tgfwn0acL8x5nzv47sAjDG/9T5OBLYBtd63pAL7gNlHGlTN\nz883a9fad8y1sqaRT4qrWbm1mlVbq6msaQJgdHIsp2cmMz0zhVNGDyI+xveBRis0trTx5pdlPL2y\nhG1VdQxNjOEH3pZjsNfembuxhU+2elr1y7ZUssft+f+RO/SbVv1J6d236qtrm7z94e6D/eNb99TS\n7N3MJTJcGJMSdzDEx6clkJ0aT0p8dK+NwexxN/LXj4p5+YtdhIcJ156awU1njmGg3ofRY59uq+bq\np1fz/A+mcMa4FKvLOYQ/wz0C2AKcA5QBa4CrjTGOwxy/jMO03Duze7h31jGPe4W3Vb+6ZB8NLW2E\nhwknpQ/whn0yE4YHtsugJ/bXNfOPz3fy3Gc7Dk4Jm3/GaC48IS0kBiuPxBjDxvIalnkHZQs6t+rH\npZA/ciDOAx0zVmqorm06+N7B8dEHw3t8mqc1Pjo5Lmimwu7aW8+fPtzCG1+WERsVwfXTRzNv+qiQ\n7jvubU+vKOHhpRspuPtckuKirS7nEH4Ld+/JLgT+hGcq5LPGmIdF5EFgrTFmSZdjl6HhfkRNrW2s\n23mAVcVVrNpazfoyF8ZAfHQEp3R04YxNZlRybK/PvtlRXcfCVdt5rWA3jS3tzMhKYf700Uwbk2Tb\nmUCuho6+ek/YV9Y0ERURRtaQ+G+1xLNS44PyH3t3tuyp4X8/2Mz7jj0Mio3i5hlj+N4pI/3aJWRX\nP1n8JZ+X7OPzX51jdSnd8mu4B0JfDveuDtQ38+m2vazcWs3KrVWU7vfMohg2oJ+3rz6Z08YkB/Qj\ndsHO/Ty9ooT3iyqIDAvj0pOG8sPpoxk3pG/NwjDGUOFuJCUuOmg+RR2Pr3cf4A8fbGbl1mpSE2L4\n8TmZXJ4/POQ/fQXSeX9czsik/jxz7WSrS+mWhnuIMsawc289K4urWbW1ik+37aWmsRURyBua6OnC\nGZvMpIyBx73mRVu74d9Fe3h6ZQkFO/eT2C+S750ygmunZRzzQKMKTp9uq+b372/my10HyEjqz0/P\nG8fFJw613Uyu49XQ3Ebufe9xy9mZ3H7eOKvL6ZaGu020trWzvszFKu/A7Lpd+2ltN8REhjF1VNLB\nln3WkHifu00amtv457pSFq4sYcfeetIH9WPeaaO4PD9d18mxMWMMH22q5Pfvb2ZTRQ3jU+O5Y2YW\n52QPtm2XW0+t27Wf7z7xKU9dM4nzc1OtLqdbGu42VdvUyuqSb7pwtlXVAZ4liU8f6+mrPz0zudsb\nd6prm3j+s5288NkO9te3MGF4IvPPGMP5uUNs0QWhfNPebnh7vZPH/r2FHXvrOWnEAH5+fhanjtEl\nDV74fCf3vFnIql+exfCBh66DFAw03PuIclfDwemWnxRXs7euGYBxQ+I4faznRqohCTG88PlOXl9X\nSktbO+dmD+H66aOZnDFQW2x9WEtbO/8sKOXP/9lKhbuR6ZnJ3DEzK+Rv3jked/1rPe8WVvDlPecF\n7b8NDfc+qL3dsLHC7enCKa7mi+37aPLudBQVEcZlk4Yz7/RRjEkJzc0HVGA0trTxj8938sSybeyr\na+b83CH8bGZWnxtMB7j4/19FQr8IXvzhKVaXclga7orGljbW7tjPjr11zMpLJTlEpvEpa9Q0tvDs\nqh08vbKEuuZWvjNxGD89b1y3yzTbUUtbO7n3vs91p2XwqwuzrS7nsHwNdx09s7GYyHBO9w64KnU0\n8TGR3HZuJnOnjeTJ5dtY9OkO3l7v5MrJI7j17LG2n0FVXOm56ziU13DvTEfRlFLfMjA2irsuzGbF\nL87iivx0Xv5iF2f8/mN+++5G9nvHdOzI4QztDbG70nBXSnVrSEIMD3/nBD782ZlckJfGghUlnPHo\nx/zlw60H15y3k8IyF/0iwxmVbI+VNTXclVJHNDIplsfmTOS9285g2pgk/vjvLZz56McsXLWdRu9S\nxnZQ5HSTnRZPuE1u7NJwV0r5JCs1ngVz83nj5lPJTkvgoXeKOOsPy1j8xS7a262ZmOEv7e2GonK3\nbbpkQMNdKdVDJ40YyD9+OJWXfjiVIQkx3PmvDSxctd3qso7Lrn311Da1kjfMHoOpoOGulDpGp45N\n5o2bT+Xs8YN57D9bKHc1HP1NQarQBhtid6XhrpQ6ZiLCA7NzaWs3PPRO122VQ4fD6SYiTMgcYp8b\n/DTclVLHJX1Qf249eyxLN1SwbHOl1eUcE4fTzbgh8ce90mow0XBXSh23688YzejkWO5b4gi5GTTG\nGBxlLtvcvNRBw10pddyiI8J58JI8du6t58nl26wup0f2uJvYW9es4a6UUt05PTOZiycM5Yll29hR\nXWd1OT5zdAymDrPPYCpouCul/Oju/8omKjyMe5c4sGpRwp5yON2IQHaattyVUqpbQxJiuP28cazY\nUsV7hRVWl+OTwjIXo5JiibPZLmQa7kopv5o7bSTZaQk88HZRSKxB43C6ybFZfztouCul/CwiPIzf\nXJpHhbuRv3y41epyjuhAfTNlBxpsdfNSBw13pZTfTRo5kCsnp7Nw1XY2V9RYXc5hFXmX+bXTsgMd\nNNyVUgHxy1njSYiJ4O43NwTt4Kodlx3ooOGulAqIgbFR3HnBeNbs2M/r68qsLqdbDqebtMQYBsVG\nWV2K32m4K6UC5vJJ6Zw8YgC/XbqRA/XBt4uTw2mvZX4703BXSgVMWJjwm0tPYH99M79/f7PV5XxL\nfXMr26pqbXdnagcNd6VUQOUMTeC6U0fx0he7+Gr3AavLOWhjeQ3GoOGulFLH6qfnZZISF83db26g\nLUh2bSqy6bIDHTTclVIBFx8TyT0X5VBY5ubF1TutLgfw9LcP7B/J0MQYq0sJCA13pVSvuOjENE4f\nm8zv399MZU2j1eVQ6HSROzQREXtsiN2VT+EuIrNEZLOIFIvInd28fruIFInIehH5UERG+r9UpVQo\nExEevCSXppZ2frt0k6W1tLS1s6XCvoOp4EO4i0g48DhwAZADXCUiOV0O+xLIN8acCPwTeNTfhSql\nQt/olDhuOHM0b3xZxmfb9lpWx9Y9tTS3tdtyTZkOvrTcpwDFxpgSY0wzsBi4pPMBxpiPjTH13oef\nA8P9W6ZSyi5+dNZY0gf14563Cmlubbekho413PNsOpgKvoX7MGB3p8el3ucOZx7wbncviMh8EVkr\nImurqqp8r1IpZRsxkeHcf3GgVd+0AAAMvElEQVQuxZW1LFy13ZIaHE43/aPCGZUUa8n1e4Mv4d7d\naEO3c5lE5HtAPvD77l43xiwwxuQbY/JTUlJ8r1IpZSvnZA9hZs4Q/vLhVkr31x/9DX7mcLrITksg\nLMyeg6ngW7iXAumdHg8HnF0PEpFzgV8Ds40xTf4pTyllV/de7Bm6e/Dtol69bnu7ocjpJs/G/e3g\nW7ivATJFZJSIRAFXAks6HyAiJwFP4Qn2Sv+XqZSym+ED+/PjczL5oGgPH27c02vX3bG3jrrmNtuu\nKdPhqOFujGkFbgHeBzYCrxpjHCLyoIjM9h72eyAOeE1EvhKRJYc5nVJKHTTv9FGMHRzHfUscNDS3\n9co1Hd413O08UwbAp00DjTFLgaVdnru309fn+rkupVQfEBURxkOX5HHV05/zxLJifjYzK+DXdDjd\nRIYL44bEB/xaVtI7VJVSlpo2JonvnDSMp5aXsK2qNuDXczhdjBsST1SEvePP3t+dUiok/OrCbKIj\nw7jvLUdAd20yxnjXcLd3lwxouCulgkBKfDS/OD+LVcXVvLO+PGDXqXA3sq+u2faDqaDhrpQKEldP\nHckJwxJ56J0iahpbAnINR5lnMFVb7kop1UvCw4TfXJpHVW0Tf/z3loBcw+F0IwLZaRruSinVayak\nD+B/po7guU93HFz/xZ8KnS5GJccSG+3TRMGQpuGulAoqP585noH9o7j7zULa/bxrU5GNN8TuSsNd\nKRVUEvtH8qsLs/ly1wFeXbv76G/w0f66ZsoONNh+2YEOGu5KqaDz3ZOHMSVjEI+8t4l9dc1+OWfH\nnanacldKKYuICA9dmkdtYyu/e9c/uzZ19OH3hZkyoOGulApSWanxzDt9FK+s3U3Bzn3HfT6H083Q\nxBgGxkb5obrgp+GulApaPz4nk7TEGH79RiGtbce3a5PD6SLXxjsvdaXhrpQKWrHREdx3cQ6bKmp4\n7rOdx3yeuqZWSqrr+kyXDGi4K6WC3Pm5qczISuGPH2ymwtV4TOfYVOHGmL4zmAoa7kqpICciPDA7\nl5Z2w2/+79h2bfpmpoy23JVSKmiMTIrlRzPG8s76clZurerx+x1lbgbFRpGWGBOA6oKThrtSKiTc\ncOZoMpL6c+9bDppae7ZrU6HTRe7QBETsuyF2VxruSqmQEBMZzoOX5LG9uo4Fy0t8fl9zaztb9tTY\nflu9rjTclVIh44xxKfzXCWn89eNidu2t9+k9WytraGkz5PWhwVTQcFdKhZh7LsohIky4b0mhT7s2\n9aU13DvTcFdKhZTUxBh+et44Pt5cxQdFe456vMPpIjYqnIyk2F6oLnhouCulQs61p2YwPjWeB5Y4\nqG9uPeKxDqeb7LQEwsL6zmAqaLgrpUJQZHgYD12ah9PVyF8+LD7sce3thqJyN3l9aNmBDhruSqmQ\nNDljEJdPGs4zK0vYuqem22O2762jvrmtz82UAQ13pVQIu/OC8cRGR3D3m90PrvbFO1M7aLgrpUJW\nUlw0v5w1ntXb9/HmV2WHvO5wuogMFzIHx1tQnbU03JVSIe3KyelMSB/Aw/+3EVdDy7deK3K6yUqN\nJyqi70Vd3/uOlVK2EhYmPHxpHvvqmvnfDzYffN4YQ2GZi9y0vjeYChruSikbyBuWyNxpGbzw+U42\nlHq20yt3NbK/voXcYX2vvx003JVSNnH7zHEkxUZz95sbaGs3fW5D7K58CncRmSUim0WkWETu7Ob1\naBF5xfv6ahHJ8HehSil1JAkxkdxzUTZfl7p4+YtdOJwuRCA7re8NpoIP4S4i4cDjwAVADnCViOR0\nOWwesN8YMxZ4DPidvwtVSqmjmT1hKNNGJ/Hoe5tYubWa0cmx9I+KsLosS/jScp8CFBtjSowxzcBi\n4JIux1wCPOf9+p/AOdKXFk5WSgUFEeGhS3NpaGmjYOf+PtslA76F+zBgd6fHpd7nuj3GGNMKuIAk\nfxSolFI9MXZwPNdPHw1AXh8dTAXw5fNKdy3wrreC+XIMIjIfmA8wYsQIHy6tlFI9d+vZmTS3tnPR\niUOtLsUyvrTcS4H0To+HA87DHSMiEUAisK/riYwxC4wx+caY/JSUlGOrWCmljqJfVDh3X5TD0AH9\nrC7FMr6E+xogU0RGiUgUcCWwpMsxS4BrvV9fBnxkfFlFXymlVEActVvGGNMqIrcA7wPhwLPGGIeI\nPAisNcYsARYCL4hIMZ4W+5WBLFoppdSR+TRHyBizFFja5bl7O33dCFzu39KUUkodK71DVSmlbEjD\nXSmlbEjDXSmlbEjDXSmlbEjDXSmlbEismo4uIlXAzmN8ezJQ7cdy/EXr6hmtq+eCtTatq2eOp66R\nxpij3gVqWbgfDxFZa4zJt7qOrrSuntG6ei5Ya9O6eqY36tJuGaWUsiENd6WUsqFQDfcFVhdwGFpX\nz2hdPRestWldPRPwukKyz10ppdSRhWrLXSml1BGEXLgfbbNuK4jIsyJSKSKFVtfSmYiki8jHIrJR\nRBwicpvVNQGISIyIfCEiX3vresDqmjoTkXAR+VJE3rG6lg4iskNENojIVyKy1up6OojIABH5p4hs\n8v49mxYENWV5f04df9wi8hOr6wIQkZ96/84XisjLIhITsGuFUreMd7PuLcB5eDYIWQNcZYwpsriu\nM4Ba4HljTJ6VtXQmImlAmjFmnYjEAwXApUHw8xIg1hhTKyKRwCrgNmPM51bW1UFEbgfygQRjzEVW\n1wOecAfyjTFBNWdbRJ4DVhpjnvHu99DfGHPA6ro6eDOjDJhqjDnW+2r8VcswPH/Xc4wxDSLyKrDU\nGLMoENcLtZa7L5t19zpjzAq62XnKasaYcmPMOu/XNcBGDt3/ttcZj1rvw0jvn6BoZYjIcOC/gGes\nriXYiUgCcAae/RwwxjQHU7B7nQNsszrYO4kA+nl3rOvPobva+U2ohbsvm3WrbohIBnASsNraSjy8\nXR9fAZXAv40xQVEX8CfgF0C71YV0YYAPRKTAuxdxMBgNVAF/93ZjPSMisVYX1cWVwMtWFwFgjCkD\n/gDsAsoBlzHmg0BdL9TC3aeNuNW3iUgc8DrwE2OM2+p6AIwxbcaYiXj25J0iIpZ3Z4nIRUClMabA\n6lq6cZox5mTgAuBH3q5Aq0UAJwN/M8acBNQBQTEOBuDtJpoNvGZ1LQAiMhBPT8MoYCgQKyLfC9T1\nQi3cfdmsW3Xi7dN+HXjRGPMvq+vpyvsxfhkwy+JSAE4DZnv7txcDZ4vIP6wtycMY4/T+txJ4A08X\npdVKgdJOn7r+iSfsg8UFwDpjzB6rC/E6F9hujKkyxrQA/wJODdTFQi3cfdmsW3l5By4XAhuNMX+0\nup4OIpIiIgO8X/fD85d+k7VVgTHmLmPMcGNMBp6/Wx8ZYwLWsvKViMR6B8TxdnvMBCyfmWWMqQB2\ni0iW96lzAEsH67u4iiDpkvHaBZwiIv29/zbPwTMOFhA+7aEaLA63WbfFZSEiLwMzgGQRKQXuM8Ys\ntLYqwNMSvQbY4O3fBviVd09cK6UBz3lnMoQBrxpjgmbaYRAaArzhyQMigJeMMe9ZW9JBtwIvehtb\nJcD3La4HABHpj2dW3Q1W19LBGLNaRP4JrANagS8J4J2qITUVUimllG9CrVtGKaWUDzTclVLKhjTc\nlVLKhjTclVLKhjTclVLKhjTcla2JyP0ickeAzn2diPw1EOdW6nhpuCullA1puCvbEZFfe9f8/w+Q\n5X1ujIi85114a6WIjPc+P0RE3vCuLf+1iJzqff5N77GOzgt1icj3RWSLiCzHc5NYx/MpIvK6iKzx\n/jkNpSykNzEpWxGRScAiYCqeuznXAU/iWWfkRmPMVhGZCvzWGHO2iLwCfGaM+ZP3jtk4Y4xLRAYZ\nY/Z5l0dYA5wJROFZVXMS4AI+Br40xtwiIi8BTxhjVonICOB9Y0x2r37zSnUSUssPKOWD6cAbxph6\nABFZAsTgWaDpNe8t/ADR3v+eDcwFz0qVeEIb4Mci8h3v1+lAJpAKLDPGVHnP/QowznvMuUBOp/Mn\niEi8dx19pXqdhruyo64fR8OAA94lho9KRGbgCetpxph6EVmG5xdEd+fufI1pxpiGnperlP9pn7uy\nmxXAd0Skn3clxYuBemC7iFwOntUyRWSC9/gPgZu8z4d7dxdKBPZ7g308cIr32NXADBFJ8i6lfHmn\n634A3NLxQER8+kWiVKBouCtb8W4r+ArwFZ517Fd6X/ofYJ6IfA04+GZ7xtuAs0RkA549ZnOB94AI\nEVkPPAR87j13OXA/8BnwHzz9+R1+DOSLyHoRKQJuDNT3qJQvdEBVKaVsSFvuSillQxruSillQxru\nSillQxruSillQxruSillQxruSillQxruSillQxruSillQ/8PP1BVuwp+OFEAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "d958c7744130b65fe3e730c52e4a358196b32ad9"
      },
      "cell_type": "markdown",
      "source": "The younger the passenger, the more chances of survival. There is some outsider at Age 80, however.\n\nWe need to complete missing values of Age. Let's do this using the mean value."
    },
    {
      "metadata": {
        "trusted": true,
        "collapsed": true,
        "_uuid": "3be58bd48fb1d8ab66c3ed4a85a624204201b6c9"
      },
      "cell_type": "code",
      "source": "mean_age = df['Age'].mean()\ndf['Age'] = df['Age'].fillna(mean_age)",
      "execution_count": 8,
      "outputs": []
    },
    {
      "metadata": {
        "_uuid": "a1d0070c0ff9c5218d4a391f946e9c21fc73214d"
      },
      "cell_type": "markdown",
      "source": "Sex is stored as \"male\" or \"female\", but a ML algorithm needs to get numerical values as input. So let's create a new feature \"male\"."
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "1f49109f8afafc8040ad4cbdcfe24f1089d08413"
      },
      "cell_type": "code",
      "source": "df['male'] = df['Sex'].map({'male': 1, 'female': 0})\ndf.sample(5)",
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 9,
          "data": {
            "text/plain": "                   Age Cabin Embarked  ...            Ticket decade  male\nPassengerId                            ...                               \n751           4.000000   NaN        S  ...             29103    0.0     0\n88           29.881138   NaN        S  ...   SOTON/OQ 392086    NaN     1\n868          31.000000   A24        S  ...          PC 17590    3.0     1\n623          20.000000   NaN        C  ...              2653    2.0     1\n43           29.881138   NaN        C  ...            349253    NaN     1\n\n[5 rows x 13 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n      <th>Fare</th>\n      <th>Name</th>\n      <th>Parch</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>SibSp</th>\n      <th>Survived</th>\n      <th>Ticket</th>\n      <th>decade</th>\n      <th>male</th>\n    </tr>\n    <tr>\n      <th>PassengerId</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>751</th>\n      <td>4.000000</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>23.0000</td>\n      <td>Wells, Miss. Joan</td>\n      <td>1</td>\n      <td>2</td>\n      <td>female</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>29103</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>88</th>\n      <td>29.881138</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>8.0500</td>\n      <td>Slocovski, Mr. Selman Francis</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>SOTON/OQ 392086</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>868</th>\n      <td>31.000000</td>\n      <td>A24</td>\n      <td>S</td>\n      <td>50.4958</td>\n      <td>Roebling, Mr. Washington Augustus II</td>\n      <td>0</td>\n      <td>1</td>\n      <td>male</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>PC 17590</td>\n      <td>3.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>623</th>\n      <td>20.000000</td>\n      <td>NaN</td>\n      <td>C</td>\n      <td>15.7417</td>\n      <td>Nakid, Mr. Sahid</td>\n      <td>1</td>\n      <td>3</td>\n      <td>male</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>2653</td>\n      <td>2.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>29.881138</td>\n      <td>NaN</td>\n      <td>C</td>\n      <td>7.8958</td>\n      <td>Kraeff, Mr. Theodor</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>349253</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "f787f4c8aec32daea026b676213951760b6c999e"
      },
      "cell_type": "code",
      "source": "df[['male','Survived']].groupby('male').mean()",
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 10,
          "data": {
            "text/plain": "      Survived\nmale          \n0     0.742038\n1     0.188908",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n    </tr>\n    <tr>\n      <th>male</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.742038</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.188908</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "e847d522de97520e2643f567ce05cf52d8dd60a4"
      },
      "cell_type": "markdown",
      "source": "So 74% of females survived, while men had just a 18.9% of surviving ratio."
    },
    {
      "metadata": {
        "_uuid": "b010521cbe5f35c2760d134858389bead569927f"
      },
      "cell_type": "markdown",
      "source": "First we will prepare train examples for training the algorithm."
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "ebba233ca66a135bd4b1f7081ef5c60036a2191a",
        "collapsed": true
      },
      "cell_type": "code",
      "source": "train = df[df['Survived'].notnull()]\n\nfeatures = ['Age', 'male']\ntrain_X = train[features]\ntrain_y = train['Survived']",
      "execution_count": 11,
      "outputs": []
    },
    {
      "metadata": {
        "_uuid": "0eefe9cea1a2183f2999e7d6278c1726f4079f84"
      },
      "cell_type": "markdown",
      "source": "Let's train a Decision Tree, which is really easy to understand."
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "c35486a3de32cb1fb67967e91c70478b1eb9a218",
        "_kg_hide-input": true
      },
      "cell_type": "code",
      "source": "\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(train_X, train_y)\ntest = df[df['Survived'].isnull()]\ntest_X = test[features]\n\ntest_y = knn.predict(test_X)\nacc_knn = round(knn.score(train_X, train_y) * 100, 2)\nacc_knn\n\n",
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 17,
          "data": {
            "text/plain": "76.209999999999994"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "f15ca87bb84a408f9058043debed8b41672e3f08"
      },
      "cell_type": "markdown",
      "source": "print results"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "c76f40775f396e2cbd9b9aae69769076b2ef3d7e"
      },
      "cell_type": "code",
      "source": "submit = pd.DataFrame(test_y.astype(int),\n                      index=test_X.index,\n                      columns=['Survived'])\nsubmit.head()",
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 18,
          "data": {
            "text/plain": "             Survived\nPassengerId          \n892                 0\n893                 0\n894                 0\n895                 0\n896                 1",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n    </tr>\n    <tr>\n      <th>PassengerId</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>892</th>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>893</th>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>894</th>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>895</th>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>896</th>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "a26eeb542ecfbbbe766250f4d88ea081706df9f0"
      },
      "cell_type": "markdown",
      "source": "Let's save this predictions in a file tha kaggle will use to evaluate it."
    },
    {
      "metadata": {
        "trusted": true,
        "collapsed": true,
        "_uuid": "0958aac1c8f0166449ba9f2f11d9a6b3285571a5"
      },
      "cell_type": "code",
      "source": "submit.to_csv('smuni_submit.csv')",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.6.5",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 1
}